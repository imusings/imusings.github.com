<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Musings]]></title>
  <link href="http://imusings.github.com/atom.xml" rel="self"/>
  <link href="http://imusings.github.com/"/>
  <updated>2012-06-15T13:29:45+08:00</updated>
  <id>http://imusings.github.com/</id>
  <author>
    <name><![CDATA[imusings]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache Tuscany: Extension Point Mechanism]]></title>
    <link href="http://imusings.github.com/blog/2012/06/apache-tuscany-extension-point-mechanism/"/>
    <updated>2012-06-08T09:34:00+08:00</updated>
    <id>http://imusings.github.com/blog/2012/06/apache-tuscany-extension-point-mechanism</id>
    <content type="html"><![CDATA[<p>Service Component Architecture (SCA)将业务功能作为一系列的服务，通过装配Assemble（或者说组合Composite）这些服务满足特定的需求，即SCA为基于SOA的应用构建提供一个编程模型。尽管理念是好的，不可回避的是其复杂性，该模型试图包含各种服务构件技术及协议等：</p>

<ul>
<li>Binding Type: 包含不同的绑定类型，如ATOM、HTTP、EJB、CORBA、REST、Web service等</li>
<li>Databinding Type: 包含不同的数据格式，如JSON、SDO等</li>
<li>Implementation Type: 包含不同的服务构件实现技术，如BPEL、Java、Python、Spring、Web等</li>
<li>Interface Type: 包含不同的接口类型，如Java、WSDL、JAX-RS、JAX-WS等</li>
</ul>


<p>Apache Tuscany是SCA规范的一个开源实现，自然也面临如何为上述愿景提供支持的问题。Tuscany将其欲支持的技术协议等实现为不同的Extensions，并定义了一个Tuscany core，该内核只提供基本的运行时和扩展机制支撑，最终通过扩展点（Extension Point）建立core和extensions之间的桥梁，允许extensions则以plugin的方式提供给内核。本文主要尝试讨论Tuscany core如何通过扩展点在运行时刻对extensions加以组织和使用以及extensions如何灵活的被core所发现并加载。</p>

<p><em>注：本文的讨论基于Apache Tuscany 2.0版本的源码，虽然2.0版本比1.6有所改动，但基本原理仍然适用于Tuscany 1.6。</em></p>

<!-- more -->


<h1>Tuscany Architecture</h1>

<p>下图展示了Tuscany的体系结构:</p>

<p><img src="http://imusings.github.com/images/ApacheTuscany/tuscany-architecture.jpg" title="Figure 1: Tuscany Architecture" ></p>

<ul>
<li>Tuscany Hosting是Tuscany的运行环境，如J2SE</li>
<li>Tuscany Core只提供运行时和扩展机制支撑</li>
<li>SCA Extensions包含了诸多的扩展，如各类绑定、数据格式、实现技术等</li>
<li>SCA API: Tuscany应用程序（图中所示的Composite Application）通过SCA API访问Tuscany服务</li>
</ul>


<p>本文中我们主要关心Tuscany Core和SCA Extensions两个模块。</p>

<h1>Extension Point</h1>

<p>Tuscany将其欲支持的技术协议等实现为不同的Extensions，对于这些扩展，通过扩展点（Extension Point）与Tuscany core发生交互与联系。</p>

<p>扩展点是Tuscany core与扩展之间的一组规约，定义了扩展应该遵循的规则、具备的行为，具体表现为扩展应该实现某些特定的Java接口或者继承某些base class。为满足不同的需求，Tuscany定义诸多的扩展点，下图示例性的展示了部分扩展点：</p>

<p><img src="http://imusings.github.com/images/ApacheTuscany/Tuscany-Extension-Point-Mechanism_an-example.jpg" title="Figure 2: Tuscany Extension Point Mechanism _ an example" ></p>

<p>上图中，以ContributionScannerExtensionPoint为例，Tuscany应用程序可能以Folder、Jar、Zip等不同格式存在，我们将这些不同格式的应用程序称为一个Contribution，而图中所示的三个ContributionScanner分别用于读取Folder、Jar和Zip格式的Contribution。当这些Foler、Jar、Zip格式的contribution scanner被加载以后，需要将其向ContributionScannerExtensionPoint注册。同样地，对于StAXArtifactProcessorExtensionPoint中注册的各个processor主要用于处理.composite文件中不同的XML元素。</p>

<h2>Extension Point Registry (EPR)</h2>

<p>Tuscany core通过Extension Point Registry (EPR)对扩展点进行管理，EPR中保存了每个扩展点的信息。以contribution scanner为例，当需要JarContributionScanner时，通过查找EPR获取ContributionScannerExtensionPoint，再通过该扩展点查找Jar scanner，代码示例如下：</p>

<figure class='code'><figcaption><span>look up extension point</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//创建EPR（Tuscany启动过程创建）</span>
</span><span class='line'><span class="n">ExtensionPointRegistry</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultExtensionPointRegistry</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'><span class="c1">//查找扩展点</span>
</span><span class='line'><span class="n">ContributionScannerExtensionPoint</span> <span class="n">scanners</span><span class="o">=</span>
</span><span class='line'>  <span class="n">registry</span><span class="o">.</span><span class="na">getExtensionPoint</span><span class="o">(</span><span class="n">ContributionScannerExtensionPoint</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="c1">//查找JarContributionScanner</span>
</span><span class='line'><span class="n">ContributionScanner</span> <span class="n">jarScanner</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">scanners</span><span class="o">.</span><span class="na">getContributionScanner</span><span class="o">(</span><span class="s">&quot;application/java-archive&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="c1">//向扩展点注册ZipContributionScanner</span>
</span><span class='line'><span class="n">ContributionScanner</span> <span class="n">zipScanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ZipContributionScanner</span><span class="o">(...);</span>
</span><span class='line'><span class="n">scanners</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">zipScanner</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>JAR File Specification: Service Provider</h1>

<p>前文说明了Tuscany运行时刻如何通过扩展点对扩展加以组织管理、引用，本章则主要关注一个扩展如何被Tuscany运行时刻发现、加载以及如何与扩展点关联。扩展只有被运行时刻发现才能发挥作用。</p>

<p>Tuscany定义了诸多扩展点，这些扩展点正如电脑主板上的插槽一般，任何与插槽接口相匹配的扩展都可以被Tuscany core所发现、使用。</p>

<p>每一个扩展必须显式的声明它所涉及的扩展点并指定与这些扩展点相应的具体实现类，二者的关系正如前文所述的ContributionScannerExtensionPoint和JarContributionScanner。Tuscany通过<a href="http://docs.oracle.com/javase/1.4.2/docs/guide/jar/jar.html">JAR File Specification: Service Provider</a>达到这一目的。关于该规范此处不再赘述。具体来看，就是在扩展的META-INF/services目录下定义属性文件，属性文件以扩展点名进行命名，而文件内容则为该扩展点的具体实现类。以binding-http扩展为例，该扩展在其META-INF/services目录下有两个属性文件，文件名如下:</p>

<ul>
<li>org.apache.tuscany.sca.binding.http.HTTPBindingFactory</li>
<li>org.apache.tuscany.sca.contribution.processor.StAXArtifactProcessor</li>
</ul>


<p>上述两个文件的内容摘录分别如下：</p>

<pre><code>//HTTPBindingFactory
org.apache.tuscany.sca.binding.http.impl.HTTPBindingFactoryImpl

//StAXArtifactProcessor
org.apache.tuscany.sca.binding.http.xml.HTTPBindingProcessor;qname=http://tuscany.apache.org/xmlns/sca/1.1#binding.http,model=org.apache.tuscany.sca.binding.http.HTTPBinding,factory=org.apache.tuscany.sca.binding.http.HTTPBindingFactory
org.apache.tuscany.sca.binding.http.xml.HTTPDefaultWireFormatProcessor;qname=http://tuscany.apache.org/xmlns/sca/1.1#wireFormat.httpDefault,model=org.apache.tuscany.sca.binding.http.HTTPDefaultWireFormat
org.apache.tuscany.sca.binding.http.xml.HTTPXMLWireFormatProcessor;qname=http://tuscany.apache.org/xmlns/sca/1.1#wireFormat.httpXml,model=org.apache.tuscany.sca.binding.http.HTTPXMLWireFormat
org.apache.tuscany.sca.binding.http.xml.HTTPDefaultOperationSelectorProcessor;qname=http://tuscany.apache.org/xmlns/sca/1.1#operationSelector.httpDefault,model=org.apache.tuscany.sca.binding.http.HTTPDefaultOperationSelector
</code></pre>

<p>HTTPBindingFactory是该扩展涉及的一个扩展点，HTTPBindingFactoryImpl则为该扩展点的一个实现类；同理，StAXArtifactProcessor是该扩展涉及的另一个扩展点，HTTPBindingProcessor、HTTPDefaultWireFormatProcessor、HTTPXMLWireFormatProcessor和HTTPDefaultOperationSelectorProcessor则为其实现类。</p>

<p>当该扩展被加载时，Tuscany会通过Tuscany SPI读取META-INF/services目录下的属性文件，将属性文件中指定的实现类向该文件名指定的扩展点进行注册，进而可被Tuscany core进行组织管理和使用。</p>

<h1>Maven Dependency</h1>

<p>Tuscany通过扩展点机制结合JAR File Service Provider的方式实现扩展，为扩展的添加和移除带来了高度的可定制性。</p>

<p>因为Tuscany使用Apache Maven对每个扩展进行管理，当我们也使用Maven管理自己的项目时，Tuscany扩展的灵活性、可定制性则更为明显和容易。我们只需为自己的项目添加它所需的maven dependencies，即extensions，不出现在直接或者间接dependencies中的扩展则完全不会被加载，即使处于分布式环境下的多个Tuscany结点也可以按需定制所需的扩展。</p>

<h1><em>See also</em></h1>

<ol>
<li><a href="http://tuscany.apache.org/documentation-2x/sca-java-runtime-overview.html">Apache Tuscany Docs 2.x: SCA Java Runtime Overview</a></li>
<li><a href="http://tuscany.apache.org/documentation-2x/tuscany-2x-extensibility-and-spis.html">Apache Tuscany Docs 2.x: Tuscany 2.x Extensibility and SPIs</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Octopress和Github搭建个人博客]]></title>
    <link href="http://imusings.github.com/blog/2012/06/set-up-octopress-blog-on-github/"/>
    <updated>2012-06-02T12:47:00+08:00</updated>
    <id>http://imusings.github.com/blog/2012/06/set-up-octopress-blog-on-github</id>
    <content type="html"><![CDATA[<p>本博的搭建主要参考一些网络文章和文档，来源于网络，回馈网络，本文对参考的文章稍微加以整理。
搭建、撰写博客的整体思路：利用Markdown标记语言（具体是什么东东可以先跳过）在本地撰写好博文，利用Octopress将其转换成静态页面，即HTML文档，然后将静态页面上传至Github，通过浏览器即可访问。下面一一介绍步骤。</p>

<!-- more -->


<h1>Github Repository</h1>

<p>你需要拥有一个Github帐号和Repo来存放你的静态页面，即你的博文。</p>

<ol>
<li>参考github<a href="http://help.github.com/win-set-up-git/">帮助文档</a>，注册Github，完成Git的安装、SSH key的设置以及个人信息的完善：</li>
<li>参考github帮助文档——<a href="http://help.github.com/create-a-repo/">创建仓库</a>。此处需要注意的是你的仓库名一定要为username.github.com，其中username为你的github用户名。</li>
</ol>


<h1>搭建本地环境</h1>

<p>本地环境的搭建主要包括安装Ruby、Python、Gem、设置环境变量等内容。具体步骤参考下面的博文——<a href="http://blog.zhourunsheng.com/2012/04/%E5%88%A9%E7%94%A8github-pages%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2octopress%E5%8D%9A%E5%AE%A2/">利用GitHub Pages安装部署Octopress博客</a></p>

<p><em>关于Ruby、Python、Gem的安装，需要遵循以下原则，否则可能导致代码无法高亮显示：</em></p>

<blockquote><p>I&#8217;m on Win7, with ruby1.9.3 (from rubyinstaller. why 1.9.2 is emphasized? my 1.9.3 is ok.), devkit, Python2.6. Just make sure that :</p><p>   1. there&#8217;s no blankcharacter in the exec path above,<br/>   2. exec path must be included in system path var, and<br/>   3. bundle update to update the gems.</p><p>Then everything is ok. without addtional things like python-dev or modification to RubyPython/Pygment.</p><footer><strong>Exception on generate codeblock with &#8220;lang:&#8221; on Windows</strong> <cite><a href='https://github.com/imathis/octopress/issues/262'>github.com/imathis/octopress/&hellip;</a></cite></footer></blockquote>


<h1>安装Octopress</h1>

<p>参考上面提及的博文<a href="http://blog.zhourunsheng.com/2012/04/%E5%88%A9%E7%94%A8github-pages%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2octopress%E5%8D%9A%E5%AE%A2/">“利用GitHub Pages安装部署Octopress博客”</a>。</p>

<h1>发布博客到github pages</h1>

<p>参考上面提及的博文<a href="http://blog.zhourunsheng.com/2012/04/%E5%88%A9%E7%94%A8github-pages%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2octopress%E5%8D%9A%E5%AE%A2/">“利用GitHub Pages安装部署Octopress博客”</a>。</p>

<h1>配置 Octopress</h1>

<p>参考上面提及的博文<a href="http://blog.zhourunsheng.com/2012/04/%E5%88%A9%E7%94%A8github-pages%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2octopress%E5%8D%9A%E5%AE%A2/">“利用GitHub Pages安装部署Octopress博客”</a>。</p>

<h1>可能遇到的问题及解决方法</h1>

<p>安装过程中遇到疑惑或者错误，可参考以下博文：</p>

<ul>
<li><a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a></li>
<li><a href="http://blog.yesmryang.net/windows-octopress-python/">Windows下使用Octopress嵌入Python代码的问题</a></li>
<li><a href="http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress/">在Octopress中使用代码高亮</a></li>
<li><a href="http://chen.yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/">【译文】用Jekyll构建静态网站</a></li>
<li><a href="http://www.blogjava.net/lishunli/archive/2012/03/18/372115.html">试用Octopress</a></li>
<li><a href="http://blog.yxwang.me/2011/11/migrated-to-octopress/">转用octopress了</a></li>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">Ruby开源项目介绍(1)：octopress——像黑客一样写博客</a></li>
<li><a href="http://coding.memory-forest.com/octopress-%E8%A9%A6%E6%9E%B6%E6%96%B9%E6%B3%95.html#more-606">Octopress 試架方法</a></li>
<li><a href="http://ihacklog.com/version-control/git/how-to-setup-an-octopress-blog-on-github.html">用Octopress搭建基于github的博客</a></li>
</ul>


<h1>Markdown</h1>

<p>Markdown的语法参考下面两篇文章：</p>

<ul>
<li><a href="http://wowubuntu.com/markdown/basic.html">Markdown: Basics （快速入门）</a></li>
<li><a href="http://wowubuntu.com/markdown/#precode">Markdown 语法说明 (简体中文版)</a></li>
</ul>


<p>Markdown相关工具可参考博文<a href="http://www.appinn.com/markdown-tools/">Markdown 工具补完</a></p>

<h1>博客设置</h1>

<h2>Octopress博客主题</h2>

<p>暂附上两个主题的链接:<a href="http://zespia.tw/blog/categories/%E4%B8%BB%E9%A1%8C/">主题1</a>、<a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html#install">主题2</a>。</p>

<h2>增加评论模块</h2>

<ul>
<li>参考<a href="http://gangmax.github.com/blog/2012/01/20/how-to-use-disqus-in-octopress/">How to Use Disqus in Octopress</a></li>
</ul>


<h2>为默认模板增加categories和tags</h2>

<ul>
<li>category功能采用插件<a href="https://github.com/tokkonopapa/octopress-tagcloud">tokkonopapa / octopress-tagcloud</a></li>
<li>tags功能采用插件<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards / octopress-tag-pages</a>和<a href="https://github.com/robbyedwards/octopress-tag-cloud">robbyedwards / octopress-tag-cloud</a></li>
<li>参考<a href="http://log4d.com/2012/05/tag-cloud/">给 Octopress 加上标签功能</a></li>
</ul>


<h2>octopress官方文档</h2>
]]></content>
  </entry>
  
</feed>
